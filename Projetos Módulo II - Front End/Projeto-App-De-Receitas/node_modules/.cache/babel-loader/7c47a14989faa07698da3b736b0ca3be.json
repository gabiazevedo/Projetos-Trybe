{"ast":null,"code":"var _jsxFileName = \"/home/gabiazevedo/Trybe/sd-011-project-recipes-app/src/components/SearchBar.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport { Button, Form } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { executeFoodSearch, updateQuery, executeDrinkSearch, updateSelectedFilter } from '../redux/actions/searchBarActions';\nimport { foodListSuccess } from '../redux/actions/foodActions';\nimport { drinkListSuccess } from '../redux/actions/drinkActions';\nimport '../SearchBar.css';\n\nclass SearchBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      food: false\n    };\n    this.handleSearchClick = this.handleSearchClick.bind(this);\n    this.checkResults = this.checkResults.bind(this);\n  }\n\n  componentDidMount() {\n    this.checkHistory();\n  }\n\n  async handleSearchClick() {\n    const {\n      query,\n      selectedFilter,\n      executeSearchFoodAction,\n      executeSearchDrinkAction\n    } = this.props;\n    const {\n      food\n    } = this.state;\n\n    if (selectedFilter === 'firstLetter' && query.length !== 1) {\n      alert('Sua busca deve conter somente 1 (um) caracter');\n      return;\n    }\n\n    if (food) {\n      await executeSearchFoodAction(query, selectedFilter);\n    } else {\n      await executeSearchDrinkAction(query, selectedFilter);\n    }\n\n    this.checkResults();\n  }\n\n  checkResults() {\n    const {\n      searchResults,\n      history,\n      saveFoodList,\n      saveDrinkList\n    } = this.props;\n    const {\n      food\n    } = this.state;\n\n    if (searchResults === null) {\n      console.log(searchResults);\n      alert('Sinto muito, nÃ£o encontramos nenhuma receita para esses filtros.');\n      return;\n    }\n\n    if (searchResults.length === 1) {\n      if (food) {\n        history.push(`/comidas/${searchResults[0].idMeal}`);\n      } else {\n        history.push(`/bebidas/${searchResults[0].idDrink}`);\n      }\n\n      return;\n    }\n\n    if (food) {\n      saveFoodList(searchResults);\n    } else {\n      saveDrinkList(searchResults);\n    }\n  }\n\n  checkHistory() {\n    const {\n      history\n    } = this.props;\n    this.setState({\n      food: history.location.pathname.includes('comidas')\n    });\n  }\n\n  render() {\n    const {\n      queryAction,\n      selectedFilterAction,\n      query,\n      history\n    } = this.props;\n    console.log(history.location.pathname.includes('comidas'));\n    return /*#__PURE__*/React.createElement(Form, {\n      className: \"searchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      class: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      \"data-testid\": \"search-input\",\n      placeholder: \"Fa\\xE7a sua pequisa\",\n      value: query,\n      onChange: ({\n        target\n      }) => queryAction(target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search-ingredient\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      name: \"filter\",\n      id: \"search-ingredient\",\n      value: \"ingredient\",\n      type: \"radio\",\n      \"data-testid\": \"ingredient-search-radio\",\n      onChange: () => selectedFilterAction('ingredient'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }), \"Ingrediente\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search-nome\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      name: \"filter\",\n      id: \"search-nome\",\n      value: \"name\",\n      type: \"radio\",\n      \"data-testid\": \"name-search-radio\",\n      onChange: () => selectedFilterAction('name'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }), \"Nome\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search-first-letter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      name: \"filter\",\n      id: \"search-first-letter\",\n      value: \"firstLetter\",\n      type: \"radio\",\n      \"data-testid\": \"first-letter-search-radio\",\n      onChange: () => selectedFilterAction('firstLetter'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }), \"Primeira Letra\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"searchBar-button\",\n      variant: \"outline-dark\",\n      type: \"button\",\n      \"data-testid\": \"exec-search-btn\",\n      onClick: () => this.handleSearchClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, \"Buscar\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  query: state.searchBarReducer.query,\n  selectedFilter: state.searchBarReducer.selectedFilter,\n  searchResults: state.searchBarReducer.searchResults\n});\n\nconst mapDispatchToProps = dispatch => ({\n  queryAction: query => dispatch(updateQuery(query)),\n  selectedFilterAction: filter => dispatch(updateSelectedFilter(filter)),\n  executeSearchFoodAction: (query, filter) => dispatch(executeFoodSearch(query, filter)),\n  executeSearchDrinkAction: (query, filter) => dispatch(executeDrinkSearch(query, filter)),\n  saveFoodList: results => dispatch(foodListSuccess(results)),\n  saveDrinkList: results => dispatch(drinkListSuccess(results))\n});\n\nSearchBar.propTypes = {\n  history: PropTypes.Object\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SearchBar));","map":{"version":3,"sources":["/home/gabiazevedo/Trybe/sd-011-project-recipes-app/src/components/SearchBar.js"],"names":["React","Component","withRouter","connect","Button","Form","PropTypes","executeFoodSearch","updateQuery","executeDrinkSearch","updateSelectedFilter","foodListSuccess","drinkListSuccess","SearchBar","constructor","state","food","handleSearchClick","bind","checkResults","componentDidMount","checkHistory","query","selectedFilter","executeSearchFoodAction","executeSearchDrinkAction","props","length","alert","searchResults","history","saveFoodList","saveDrinkList","console","log","push","idMeal","idDrink","setState","location","pathname","includes","render","queryAction","selectedFilterAction","target","value","mapStateToProps","searchBarReducer","mapDispatchToProps","dispatch","filter","results","propTypes","Object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport { Button, Form } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { executeFoodSearch, updateQuery, executeDrinkSearch,\n  updateSelectedFilter } from '../redux/actions/searchBarActions';\nimport { foodListSuccess } from '../redux/actions/foodActions';\nimport { drinkListSuccess } from '../redux/actions/drinkActions';\nimport '../SearchBar.css';\n\nclass SearchBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      food: false,\n    };\n    this.handleSearchClick = this.handleSearchClick.bind(this);\n    this.checkResults = this.checkResults.bind(this);\n  }\n\n  componentDidMount() {\n    this.checkHistory();\n  }\n\n  async handleSearchClick() {\n    const { query, selectedFilter, executeSearchFoodAction,\n      executeSearchDrinkAction } = this.props;\n    const { food } = this.state;\n    if (selectedFilter === 'firstLetter' && query.length !== 1) {\n      alert('Sua busca deve conter somente 1 (um) caracter');\n      return;\n    }\n    if (food) {\n      await executeSearchFoodAction(query, selectedFilter);\n    } else {\n      await executeSearchDrinkAction(query, selectedFilter);\n    }\n    this.checkResults();\n  }\n\n  checkResults() {\n    const { searchResults, history, saveFoodList, saveDrinkList } = this.props;\n    const { food } = this.state;\n    if (searchResults === null) {\n      console.log(searchResults);\n      alert('Sinto muito, nÃ£o encontramos nenhuma receita para esses filtros.');\n      return;\n    } if (searchResults.length === 1) {\n      if (food) {\n        history.push(`/comidas/${searchResults[0].idMeal}`);\n      } else {\n        history.push(`/bebidas/${searchResults[0].idDrink}`);\n      }\n      return;\n    }\n    if (food) {\n      saveFoodList(searchResults);\n    } else {\n      saveDrinkList(searchResults);\n    }\n  }\n\n  checkHistory() {\n    const { history } = this.props;\n    this.setState({\n      food: history.location.pathname.includes('comidas'),\n    });\n  }\n\n  render() {\n    const { queryAction, selectedFilterAction, query, history } = this.props;\n    console.log(history.location.pathname.includes('comidas'));\n    return (\n      <Form className=\"searchBar\">\n        <Form.Group class=\"mb-3\">\n          <Form.Control\n            type=\"text\"\n            data-testid=\"search-input\"\n            placeholder=\"FaÃ§a sua pequisa\"\n            value={ query }\n            onChange={ ({ target }) => queryAction(target.value) }\n          />\n          <label htmlFor=\"search-ingredient\">\n            <input\n              className=\"input\"\n              name=\"filter\"\n              id=\"search-ingredient\"\n              value=\"ingredient\"\n              type=\"radio\"\n              data-testid=\"ingredient-search-radio\"\n              onChange={ () => selectedFilterAction('ingredient') }\n            />\n            Ingrediente\n          </label>\n          <label htmlFor=\"search-nome\">\n            <input\n              className=\"input\"\n              name=\"filter\"\n              id=\"search-nome\"\n              value=\"name\"\n              type=\"radio\"\n              data-testid=\"name-search-radio\"\n              onChange={ () => selectedFilterAction('name') }\n            />\n            Nome\n          </label>\n          <label htmlFor=\"search-first-letter\">\n            <input\n              className=\"input\"\n              name=\"filter\"\n              id=\"search-first-letter\"\n              value=\"firstLetter\"\n              type=\"radio\"\n              data-testid=\"first-letter-search-radio\"\n              onChange={ () => selectedFilterAction('firstLetter') }\n            />\n            Primeira Letra\n          </label>\n          <Button\n            className=\"searchBar-button\"\n            variant=\"outline-dark\"\n            type=\"button\"\n            data-testid=\"exec-search-btn\"\n            onClick={ () => this.handleSearchClick() }\n          >\n            Buscar\n          </Button>\n\n        </Form.Group>\n\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  query: state.searchBarReducer.query,\n  selectedFilter: state.searchBarReducer.selectedFilter,\n  searchResults: state.searchBarReducer.searchResults,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  queryAction: (query) => dispatch(updateQuery(query)),\n  selectedFilterAction: (filter) => dispatch(updateSelectedFilter(filter)),\n  executeSearchFoodAction: (query, filter) => dispatch(executeFoodSearch(query, filter)),\n  executeSearchDrinkAction:\n   (query, filter) => dispatch(executeDrinkSearch(query, filter)),\n  saveFoodList: (results) => dispatch(foodListSuccess(results)),\n  saveDrinkList: (results) => dispatch(drinkListSuccess(results)),\n});\n\nSearchBar.propTypes = {\n  history: PropTypes.Object,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SearchBar));\n"]},"metadata":{},"sourceType":"module"}