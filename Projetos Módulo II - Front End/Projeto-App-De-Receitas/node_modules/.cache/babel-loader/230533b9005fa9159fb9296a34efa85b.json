{"ast":null,"code":"import { fetchAPIName, fetchFoodIngredientSearch, fetchAPIFirstLetter } from '../../services/fetchAPIFood';\nimport { fetchDrinkIngredientSearch, fetchAPIFirstLetter as fetchDrinkFirstLetter, fetchAPIName as fetchDrinkName } from '../../services/fetchAPIDrink';\nexport const UPDATE_QUERY = 'UPDATE_QUERY';\nexport const UPDATE_SELECTED_FILTER = 'UPDATE_SELECTED_FILTER';\nexport const SAVE_SEARCH_RESULTS = 'SAVE_SEARCH_RESULTS';\nexport const updateQuery = payload => ({\n  type: UPDATE_QUERY,\n  payload\n});\nexport const updateSelectedFilter = payload => ({\n  type: UPDATE_SELECTED_FILTER,\n  payload\n});\n\nconst saveSearchResults = payload => ({\n  type: SAVE_SEARCH_RESULTS,\n  payload\n});\n\nexport const executeFoodSearch = (query, filter) => async dispatch => {\n  switch (filter) {\n    case 'ingredient':\n      {\n        const ingredientsResult = await fetchFoodIngredientSearch(query);\n        await dispatch(saveSearchResults(ingredientsResult));\n        break;\n      }\n\n    default:\n    case 'name':\n      {\n        const nameResults = await fetchAPIName(query);\n        await dispatch(saveSearchResults(nameResults));\n        break;\n      }\n\n    case 'firstLetter':\n      {\n        const firstLetterResults = await fetchAPIFirstLetter(query);\n        await dispatch(saveSearchResults(firstLetterResults));\n        break;\n      }\n  }\n};\nexport const executeDrinkSearch = (query, filter) => async dispatch => {\n  switch (filter) {\n    case 'ingredient':\n      {\n        const ingredientsResult = await fetchDrinkIngredientSearch(query);\n        await dispatch(saveSearchResults(ingredientsResult));\n        break;\n      }\n\n    default:\n    case 'name':\n      {\n        const nameResults = await fetchDrinkName(query);\n        await dispatch(saveSearchResults(nameResults));\n        break;\n      }\n\n    case 'firstLetter':\n      {\n        const firstLetterResults = await fetchDrinkFirstLetter(query);\n        console.log(firstLetterResults);\n        await dispatch(saveSearchResults(firstLetterResults));\n        break;\n      }\n  }\n};","map":{"version":3,"sources":["/home/gabiazevedo/Trybe/sd-011-project-recipes-app/src/redux/actions/searchBarActions.js"],"names":["fetchAPIName","fetchFoodIngredientSearch","fetchAPIFirstLetter","fetchDrinkIngredientSearch","fetchDrinkFirstLetter","fetchDrinkName","UPDATE_QUERY","UPDATE_SELECTED_FILTER","SAVE_SEARCH_RESULTS","updateQuery","payload","type","updateSelectedFilter","saveSearchResults","executeFoodSearch","query","filter","dispatch","ingredientsResult","nameResults","firstLetterResults","executeDrinkSearch","console","log"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,yBAAvB,EACEC,mBADF,QAC6B,6BAD7B;AAEA,SAASC,0BAAT,EAAqCD,mBAAmB,IAAIE,qBAA5D,EACEJ,YAAY,IAAIK,cADlB,QACwC,8BADxC;AAGA,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,WAAW,GAAIC,OAAD,KAAc;AACvCC,EAAAA,IAAI,EAAEL,YADiC;AAEvCI,EAAAA;AAFuC,CAAd,CAApB;AAKP,OAAO,MAAME,oBAAoB,GAAIF,OAAD,KAAc;AAChDC,EAAAA,IAAI,EAAEJ,sBAD0C;AAEhDG,EAAAA;AAFgD,CAAd,CAA7B;;AAKP,MAAMG,iBAAiB,GAAIH,OAAD,KAAc;AACtCC,EAAAA,IAAI,EAAEH,mBADgC;AAEtCE,EAAAA;AAFsC,CAAd,CAA1B;;AAKA,OAAO,MAAMI,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB,MAAOC,QAAP,IAAoB;AACtE,UAAQD,MAAR;AACA,SAAK,YAAL;AAAmB;AACjB,cAAME,iBAAiB,GAAG,MAAMjB,yBAAyB,CAACc,KAAD,CAAzD;AACA,cAAME,QAAQ,CAACJ,iBAAiB,CAACK,iBAAD,CAAlB,CAAd;AACA;AACD;;AACD;AACA,SAAK,MAAL;AAAa;AACX,cAAMC,WAAW,GAAG,MAAMnB,YAAY,CAACe,KAAD,CAAtC;AACA,cAAME,QAAQ,CAACJ,iBAAiB,CAACM,WAAD,CAAlB,CAAd;AACA;AACD;;AACD,SAAK,aAAL;AAAoB;AAClB,cAAMC,kBAAkB,GAAG,MAAMlB,mBAAmB,CAACa,KAAD,CAApD;AACA,cAAME,QAAQ,CAACJ,iBAAiB,CAACO,kBAAD,CAAlB,CAAd;AACA;AACD;AAhBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMC,kBAAkB,GAAG,CAACN,KAAD,EAAQC,MAAR,KAAmB,MAAOC,QAAP,IAAoB;AACvE,UAAQD,MAAR;AACA,SAAK,YAAL;AAAmB;AACjB,cAAME,iBAAiB,GAAG,MAAMf,0BAA0B,CAACY,KAAD,CAA1D;AACA,cAAME,QAAQ,CAACJ,iBAAiB,CAACK,iBAAD,CAAlB,CAAd;AACA;AACD;;AACD;AACA,SAAK,MAAL;AAAa;AACX,cAAMC,WAAW,GAAG,MAAMd,cAAc,CAACU,KAAD,CAAxC;AACA,cAAME,QAAQ,CAACJ,iBAAiB,CAACM,WAAD,CAAlB,CAAd;AACA;AACD;;AACD,SAAK,aAAL;AAAoB;AAClB,cAAMC,kBAAkB,GAAG,MAAMhB,qBAAqB,CAACW,KAAD,CAAtD;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYH,kBAAZ;AACA,cAAMH,QAAQ,CAACJ,iBAAiB,CAACO,kBAAD,CAAlB,CAAd;AACA;AACD;AAjBD;AAmBD,CApBM","sourcesContent":["import { fetchAPIName, fetchFoodIngredientSearch,\n  fetchAPIFirstLetter } from '../../services/fetchAPIFood';\nimport { fetchDrinkIngredientSearch, fetchAPIFirstLetter as fetchDrinkFirstLetter,\n  fetchAPIName as fetchDrinkName } from '../../services/fetchAPIDrink';\n\nexport const UPDATE_QUERY = 'UPDATE_QUERY';\nexport const UPDATE_SELECTED_FILTER = 'UPDATE_SELECTED_FILTER';\nexport const SAVE_SEARCH_RESULTS = 'SAVE_SEARCH_RESULTS';\n\nexport const updateQuery = (payload) => ({\n  type: UPDATE_QUERY,\n  payload,\n});\n\nexport const updateSelectedFilter = (payload) => ({\n  type: UPDATE_SELECTED_FILTER,\n  payload,\n});\n\nconst saveSearchResults = (payload) => ({\n  type: SAVE_SEARCH_RESULTS,\n  payload,\n});\n\nexport const executeFoodSearch = (query, filter) => async (dispatch) => {\n  switch (filter) {\n  case 'ingredient': {\n    const ingredientsResult = await fetchFoodIngredientSearch(query);\n    await dispatch(saveSearchResults(ingredientsResult));\n    break;\n  }\n  default:\n  case 'name': {\n    const nameResults = await fetchAPIName(query);\n    await dispatch(saveSearchResults(nameResults));\n    break;\n  }\n  case 'firstLetter': {\n    const firstLetterResults = await fetchAPIFirstLetter(query);\n    await dispatch(saveSearchResults(firstLetterResults));\n    break;\n  }\n  }\n};\n\nexport const executeDrinkSearch = (query, filter) => async (dispatch) => {\n  switch (filter) {\n  case 'ingredient': {\n    const ingredientsResult = await fetchDrinkIngredientSearch(query);\n    await dispatch(saveSearchResults(ingredientsResult));\n    break;\n  }\n  default:\n  case 'name': {\n    const nameResults = await fetchDrinkName(query);\n    await dispatch(saveSearchResults(nameResults));\n    break;\n  }\n  case 'firstLetter': {\n    const firstLetterResults = await fetchDrinkFirstLetter(query);\n    console.log(firstLetterResults);\n    await dispatch(saveSearchResults(firstLetterResults));\n    break;\n  }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}