{"ast":null,"code":"import css from 'dom-helpers/css';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize';\nimport ModalManager from 'react-overlays/ModalManager';\nconst Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler'\n};\n\nclass BootstrapModalManager extends ModalManager {\n  adjustAndStore(prop, element, adjust) {\n    const actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\n    // @ts-ignore\n\n    element.dataset[prop] = actual;\n    css(element, {\n      [prop]: `${parseFloat(css(element, prop)) + adjust}px`\n    });\n  }\n\n  restore(prop, element) {\n    const value = element.dataset[prop];\n\n    if (value !== undefined) {\n      delete element.dataset[prop];\n      css(element, {\n        [prop]: value\n      });\n    }\n  }\n\n  setContainerStyle(containerState, container) {\n    super.setContainerStyle(containerState, container);\n    if (!containerState.overflowing) return;\n    const size = getScrollbarSize();\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore('paddingRight', el, size));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore('marginRight', el, -size));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore('marginRight', el, size));\n  }\n\n  removeContainerStyle(containerState, container) {\n    super.removeContainerStyle(containerState, container);\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.restore('paddingRight', el));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.restore('marginRight', el));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore('marginRight', el));\n  }\n\n}\n\nlet sharedManager;\nexport function getSharedManager() {\n  if (!sharedManager) sharedManager = new BootstrapModalManager();\n  return sharedManager;\n}\nexport default BootstrapModalManager;","map":null,"metadata":{},"sourceType":"module"}