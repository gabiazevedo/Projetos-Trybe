{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavContext from './NavContext';\nimport SafeAnchor from './SafeAnchor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  as: SafeAnchor,\n  disabled: false\n};\nconst DropdownItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  eventKey,\n  disabled,\n  href,\n  onClick,\n  onSelect,\n  active: propActive,\n  as: Component,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-item');\n  const onSelectCtx = useContext(SelectableContext);\n  const navContext = useContext(NavContext);\n  const {\n    activeKey\n  } = navContext || {};\n  const key = makeEventKey(eventKey, href);\n  const active = propActive == null && key != null ? makeEventKey(activeKey) === key : propActive;\n  const handleClick = useEventCallback(event => {\n    // SafeAnchor handles the disabled case, but we handle it here\n    // for other components\n    if (disabled) return;\n    onClick == null ? void 0 : onClick(event);\n    onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    onSelect == null ? void 0 : onSelect(key, event);\n  });\n  return (\n    /*#__PURE__*/\n    // \"TS2604: JSX element type 'Component' does not have any construct or call signatures.\"\n    // @ts-ignore\n    _jsx(Component, { ...props,\n      ref: ref,\n      href: href,\n      disabled: disabled,\n      className: classNames(className, prefix, active && 'active', disabled && 'disabled'),\n      onClick: handleClick\n    })\n  );\n});\nDropdownItem.displayName = 'DropdownItem';\nDropdownItem.defaultProps = defaultProps;\nexport default DropdownItem;","map":null,"metadata":{},"sourceType":"module"}